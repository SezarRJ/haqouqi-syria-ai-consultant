
import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { FileText, Download, Eye } from 'lucide-react';

interface DocumentDraftingProps {
  language: 'ar' | 'en';
}

export const DocumentDrafting = ({ language }: DocumentDraftingProps) => {
  const [documentType, setDocumentType] = useState('');
  const [formData, setFormData] = useState<Record<string, string>>({});
  const [generatedDocument, setGeneratedDocument] = useState<string>('');
  const [loading, setLoading] = useState(false);

  const texts = {
    ar: {
      title: 'صياغة الوثائق القانونية',
      subtitle: 'إنشاء مسودات العقود والوثائق القانونية',
      selectType: 'اختر نوع الوثيقة',
      rental: 'عقد إيجار',
      employment: 'عقد عمل',
      divorce: 'أوراق طلاق',
      partnership: 'عقد شراكة',
      will: 'وصية',
      complaint: 'شكوى قانونية',
      generate: 'إنشاء الوثيقة',
      preview: 'معاينة',
      download: 'تحميل',
      generating: 'جاري الإنشاء...',
      partyA: 'الطرف الأول',
      partyB: 'الطرف الثاني',
      amount: 'المبلغ',
      duration: 'المدة',
      description: 'الوصف',
      location: 'المكان'
    },
    en: {
      title: 'Legal Document Drafting',
      subtitle: 'Generate draft contracts and legal documents',
      selectType: 'Select Document Type',
      rental: 'Rental Agreement',
      employment: 'Employment Contract',
      divorce: 'Divorce Papers',
      partnership: 'Partnership Agreement',
      will: 'Will/Testament',
      complaint: 'Legal Complaint',
      generate: 'Generate Document',
      preview: 'Preview',
      download: 'Download',
      generating: 'Generating...',
      partyA: 'Party A',
      partyB: 'Party B',
      amount: 'Amount',
      duration: 'Duration',
      description: 'Description',
      location: 'Location'
    }
  };

  const t = texts[language];

  const documentTypes = [
    { value: 'rental', label: t.rental },
    { value: 'employment', label: t.employment },
    { value: 'divorce', label: t.divorce },
    { value: 'partnership', label: t.partnership },
    { value: 'will', label: t.will },
    { value: 'complaint', label: t.complaint }
  ];

  const getFormFields = (type: string) => {
    const commonFields = ['partyA', 'partyB', 'location'];
    switch (type) {
      case 'rental':
        return [...commonFields, 'amount', 'duration', 'description'];
      case 'employment':
        return [...commonFields, 'amount', 'duration'];
      case 'partnership':
        return [...commonFields, 'description'];
      default:
        return commonFields;
    }
  };

  const generateDocument = async () => {
    setLoading(true);
    // Simulate document generation
    setTimeout(() => {
      const mockDocument = language === 'ar' ? `
عقد ${documentTypes.find(d => d.value === documentType)?.label}

بين الأطراف:
الطرف الأول: ${formData.partyA || '[اسم الطرف الأول]'}
الطرف الثاني: ${formData.partyB || '[اسم الطرف الثاني]'}

المكان: ${formData.location || '[المكان]'}
التاريخ: ${new Date().toLocaleDateString('ar-SA')}

${formData.amount ? `المبلغ: ${formData.amount} ريال سعودي` : ''}
${formData.duration ? `المدة: ${formData.duration}` : ''}

الشروط والأحكام:
1. يلتزم الطرف الأول بتنفيذ التزاماته وفقاً لأحكام هذا العقد
2. يلتزم الطرف الثاني بالوفاء بالتزاماته المالية في المواعيد المحددة
3. في حالة النزاع، يتم الرجوع إلى القوانين السورية النافذة

${formData.description ? `تفاصيل إضافية: ${formData.description}` : ''}

تم إنشاء هذه الوثيقة بواسطة المستشار القانوني السوري
تاريخ الإنشاء: ${new Date().toLocaleString('ar-SA')}

تنبيه: هذه مسودة أولية تحتاج لمراجعة محامي مختص
      ` : `
${documentTypes.find(d => d.value === documentType)?.label}

Between the Parties:
Party A: ${formData.partyA || '[Party A Name]'}
Party B: ${formData.partyB || '[Party B Name]'}

Location: ${formData.location || '[Location]'}
Date: ${new Date().toLocaleDateString('en-US')}

${formData.amount ? `Amount: ${formData.amount} SAR` : ''}
${formData.duration ? `Duration: ${formData.duration}` : ''}

Terms and Conditions:
1. Party A shall fulfill its obligations according to this contract
2. Party B shall meet its financial obligations on scheduled dates
3. In case of dispute, Syrian laws shall apply

${formData.description ? `Additional Details: ${formData.description}` : ''}

Generated by Syrian Legal Advisor
Creation Date: ${new Date().toLocaleString('en-US')}

Notice: This is a preliminary draft requiring review by a qualified lawyer
      `;
      
      setGeneratedDocument(mockDocument);
      setLoading(false);
    }, 2000);
  };

  const downloadDocument = () => {
    const blob = new Blob([generatedDocument], { type: 'text/plain;charset=utf-8' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${documentType}_document.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <FileText className="h-5 w-5 text-blue-600" />
          {t.title}
        </CardTitle>
        <CardDescription>{t.subtitle}</CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="space-y-4">
            <div>
              <Label>{t.selectType}</Label>
              <Select value={documentType} onValueChange={setDocumentType}>
                <SelectTrigger>
                  <SelectValue placeholder={t.selectType} />
                </SelectTrigger>
                <SelectContent>
                  {documentTypes.map((type) => (
                    <SelectItem key={type.value} value={type.value}>
                      {type.label}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            {documentType && getFormFields(documentType).map((field) => (
              <div key={field}>
                <Label>{t[field as keyof typeof t] as string}</Label>
                {field === 'description' ? (
                  <Textarea
                    value={formData[field] || ''}
                    onChange={(e) => setFormData(prev => ({ ...prev, [field]: e.target.value }))}
                    placeholder={t[field as keyof typeof t] as string}
                  />
                ) : (
                  <Input
                    value={formData[field] || ''}
                    onChange={(e) => setFormData(prev => ({ ...prev, [field]: e.target.value }))}
                    placeholder={t[field as keyof typeof t] as string}
                  />
                )}
              </div>
            ))}

            <Button 
              onClick={generateDocument} 
              disabled={!documentType || loading}
              className="w-full"
            >
              {loading ? (
                <div className="flex items-center gap-2">
                  <div className="animate-spin h-4 w-4 border-2 border-white border-t-transparent rounded-full"></div>
                  {t.generating}
                </div>
              ) : (
                <>
                  <FileText className="h-4 w-4 mr-2" />
                  {t.generate}
                </>
              )}
            </Button>
          </div>

          <div className="space-y-4">
            {generatedDocument && (
              <>
                <div className="flex gap-2">
                  <Button variant="outline" className="flex-1">
                    <Eye className="h-4 w-4 mr-2" />
                    {t.preview}
                  </Button>
                  <Button onClick={downloadDocument} className="flex-1">
                    <Download className="h-4 w-4 mr-2" />
                    {t.download}
                  </Button>
                </div>
                
                <div className="border rounded-lg p-4 bg-gray-50 max-h-96 overflow-y-auto">
                  <pre className="whitespace-pre-wrap text-sm font-mono">
                    {generatedDocument}
                  </pre>
                </div>
              </>
            )}
          </div>
        </div>
      </CardContent>
    </Card>
  );
};
